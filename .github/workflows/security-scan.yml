name: Security Scan

on:
  schedule:
    - cron: '0 4 * * 1'  # Montags um 04:00 UTC
  workflow_dispatch:  # Manuell ausführbar
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.jsx'
      - '**/*.tsx'

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-ghsas: |
            GHSA-xxxx-xxxx-xxxx
          deny-licenses: |
            GPL-2.0
            GPL-3.0

  npm-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run npm audit fix (dry-run)
        run: npm audit fix --dry-run
        continue-on-error: true

  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-secrets.sarif'

      - name: Upload Trivy secret scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-secrets.sarif'

  security-report:
    runs-on: ubuntu-latest
    needs: [codeql, npm-audit, trivy-scan, secret-scan]
    if: always()
    steps:
      - name: Create Security Summary
        run: |
          echo "## Security Scan Report - $(date +'%Y-%m-%d')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **CodeQL Analysis**: ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Audit**: ${{ needs.npm-audit.result == 'success' && '✅ Passed' || '⚠️ Issues found' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trivy Scan**: ${{ needs.trivy-scan.result == 'success' && '✅ Passed' || '⚠️ Vulnerabilities found' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Scan**: ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '🚨 Secrets found' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "1. Review all high and critical vulnerabilities immediately" >> $GITHUB_STEP_SUMMARY
          echo "2. Update dependencies to latest secure versions" >> $GITHUB_STEP_SUMMARY
          echo "3. Remove any exposed secrets or API keys" >> $GITHUB_STEP_SUMMARY
          echo "4. Implement code security best practices" >> $GITHUB_STEP_SUMMARY