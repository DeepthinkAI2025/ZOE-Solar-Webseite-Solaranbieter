name: Auto Documentation Update

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'data/**'
      - 'docs/**'
      - 'public/**'
      - '*.md'
      - '.github/**'

jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.analyze.outputs.changes }}
      has-significant-changes: ${{ steps.analyze.outputs.has-significant-changes }}
      changed-files: ${{ steps.analyze.outputs.changed-files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Analyze Git Changes
        id: analyze
        run: |
          # Get the diff between previous and current commit
          git diff --name-status HEAD~1 HEAD > changes.txt

          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(tsx|ts|jsx|js)$' | grep -v -E '(test|spec|__tests__)' | tr '\n' ',' | sed 's/,$//')

          # Analyze changes for significance
          SIGNIFICANT_CHANGES=""
          HAS_SIGNIFICANT=false

          while IFS= read -r line; do
            STATUS=$(echo "$line" | cut -c1)
            FILE=$(echo "$line" | cut -c3-)

            case $STATUS in
              A)
                # New file added
                if [[ "$FILE" =~ \.(tsx|ts|jsx|js)$ ]] && [[ ! "$FILE" =~ (test|spec|__tests__) ]]; then
                  SIGNIFICANT_CHANGES="${SIGNIFICANT_CHANGES}â€¢ Neue Komponente/Funktion hinzugefÃ¼gt: \`$FILE\`\n"
                  HAS_SIGNIFICANT=true
                fi
                ;;
              M)
                # Modified file
                if [[ "$FILE" =~ \.(tsx|ts|jsx|js)$ ]] && [[ ! "$FILE" =~ (test|spec|__tests__) ]]; then
                  # Check if it's a significant change (not just formatting)
                  CHANGED_LINES=$(git diff HEAD~1 HEAD -- "$FILE" | grep '^+' | grep -v '^+++' | wc -l)
                  if [ "$CHANGED_LINES" -gt 10 ]; then
                    SIGNIFICANT_CHANGES="${SIGNIFICANT_CHANGES}â€¢ Wesentliche Ã„nderungen an: \`$FILE\` ($CHANGED_LINES Zeilen)\n"
                    HAS_SIGNIFICANT=true
                  fi
                fi
                ;;
              D)
                # Deleted file
                if [[ "$FILE" =~ \.(tsx|ts|jsx|js)$ ]]; then
                  SIGNIFICANT_CHANGES="${SIGNIFICANT_CHANGES}â€¢ Datei entfernt: \`$FILE\`\n"
                  HAS_SIGNIFICANT=true
                fi
                ;;
            esac
          done < changes.txt

          # Check for breaking changes in package.json
          if git diff HEAD~1 HEAD -- package.json | grep -q '"version"'; then
            SIGNIFICANT_CHANGES="${SIGNIFICANT_CHANGES}â€¢ Neue Version released\n"
            HAS_SIGNIFICANT=true
          fi

          # Output results
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$SIGNIFICANT_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "changed-files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "has-significant-changes=$HAS_SIGNIFICANT" >> $GITHUB_OUTPUT

  update-documentation:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.has-significant-changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Update Existing Documentation Sections
        run: node scripts/update-existing-docs.cjs
        env:
          CHANGES: ${{ needs.analyze-changes.outputs.changes }}
          CHANGED_FILES: ${{ needs.analyze-changes.outputs.changed-files }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Commit documentation updates
        run: |
          git config --local user.email "docs@github.com"
          git config --local user.name "Auto Documentation Bot"

          # Check if there are actual changes to commit
          if git diff --quiet pages/DocsPage.tsx; then
            echo "No documentation changes to commit"
          else
            git add pages/DocsPage.tsx
            COMMIT_MSG="ðŸ“š Enhanced existing documentation sections

          Code changes analyzed and documentation updated:
          ${CHANGES}

          Updated sections based on changed files:
          $(cat docs-update-info.txt)

          Commit: ${GITHUB_SHA::7}
          Date: $(date -I)

          This update was automatically generated by intelligent documentation analysis."

            git commit -m "$COMMIT_MSG"
            git pull --rebase origin ${{ github.ref_name }}
            git push
          fi

      - name: Notify about documentation enhancement
        run: |
          echo "âœ… Existing documentation sections automatically enhanced"
          echo "Changes analyzed and integrated: ${CHANGES}"

  notify-on-docs-enhancement:
    needs: update-documentation
    if: success() && needs.analyze-changes.outputs.has-significant-changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Send notification
        run: |
          echo "ðŸ“š Documentation sections have been automatically enhanced!"
          echo "Existing documentation was updated based on code changes."
          # Hier kÃ¶nnte eine Slack/Discord/Webhook-Notification hinzugefÃ¼gt werden